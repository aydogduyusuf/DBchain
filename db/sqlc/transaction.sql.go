// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    transaction_type,
    from_address,
    to_address,
    transfer_data,
    hash_value
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, transaction_type, from_address, to_address, transfer_data, hash_value, create_time, update_time, delete_time, is_active
`

type CreateTransactionParams struct {
	TransactionType string         `json:"transaction_type"`
	FromAddress     string         `json:"from_address"`
	ToAddress       sql.NullString `json:"to_address"`
	TransferData    string         `json:"transfer_data"`
	HashValue       string         `json:"hash_value"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TransactionType,
		arg.FromAddress,
		arg.ToAddress,
		arg.TransferData,
		arg.HashValue,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.FromAddress,
		&i.ToAddress,
		&i.TransferData,
		&i.HashValue,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.IsActive,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, transaction_type, from_address, to_address, transfer_data, hash_value, create_time, update_time, delete_time, is_active FROM transactions
WHERE 
    id = $1
LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.FromAddress,
		&i.ToAddress,
		&i.TransferData,
		&i.HashValue,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.IsActive,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, transaction_type, from_address, to_address, transfer_data, hash_value, create_time, update_time, delete_time, is_active FROM transactions
WHERE 
    from_address = $1 OR
    to_address = $2
ORDER BY id
`

type ListTransactionsParams struct {
	FromAddress string         `json:"from_address"`
	ToAddress   sql.NullString `json:"to_address"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.FromAddress, arg.ToAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TransactionType,
			&i.FromAddress,
			&i.ToAddress,
			&i.TransferData,
			&i.HashValue,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeleteTime,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
