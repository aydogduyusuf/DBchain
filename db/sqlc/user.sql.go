// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  wallet_public_address,
  wallet_private_address
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, username, hashed_password, full_name, email, wallet_public_address, wallet_private_address, create_time, update_time, delete_time, is_active
`

type CreateUserParams struct {
	Username             string `json:"username"`
	HashedPassword       string `json:"hashed_password"`
	FullName             string `json:"full_name"`
	Email                string `json:"email"`
	WalletPublicAddress  string `json:"wallet_public_address"`
	WalletPrivateAddress string `json:"wallet_private_address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.WalletPublicAddress,
		arg.WalletPrivateAddress,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.WalletPublicAddress,
		&i.WalletPrivateAddress,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active = false AND delete_time = current_timestamp
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, wallet_public_address, wallet_private_address, create_time, update_time, delete_time, is_active FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.WalletPublicAddress,
		&i.WalletPrivateAddress,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.IsActive,
	)
	return i, err
}

const getUserFromID = `-- name: GetUserFromID :one
SELECT id, username, hashed_password, full_name, email, wallet_public_address, wallet_private_address, create_time, update_time, delete_time, is_active FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserFromID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.WalletPublicAddress,
		&i.WalletPrivateAddress,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.IsActive,
	)
	return i, err
}
